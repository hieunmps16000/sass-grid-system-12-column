@use "sass:map";
@use "sass:math";

// Breakpoints, dimension, container, row, column, v.v
$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
);
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px,
    xxl: 1320px,
);
$grid-columns: 12;
$grid-gutter-width: 30px;
$gutters: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3,
);

%gutter-padding {
    padding-left: calc(var(--grid-gutter-x) * 0.5);
    padding-right: calc(var(--grid-gutter-x) * 0.5);
}

.container-fluid {
    --grid-gutter-x: #{$grid-gutter-width};
    --grid-gutter-y: 0;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    @extend %gutter-padding;
}

.container {
    @extend .container-fluid;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--grid-gutter-y) * -1);
    margin-left: calc(var(--grid-gutter-x) * -0.5);
    margin-right: calc(var(--grid-gutter-x) * -0.5);

    > * [class*="col-"] {
        flex: 0 0 auto;
        @extend %gutter-padding;
    }
}

.col {
    flex: 1 0;
}

@mixin make-media-query($dimension, $bypass: false) {
    @if $bypass {
        @content;
    } @else {
        @media (min-width: $dimension) {
            @content;
        }
    }
}

@each $breakpoint, $dimension in $grid-breakpoints {
    $max-width: map.get($container-max-widths, $breakpoint);
    $is-xs: $breakpoint == xs;
    $infix: if($is-xs, "", "-#{$breakpoint}");
    @include make-media-query($dimension, $is-xs) {
        .container {
            max-width: $max-width;
        }

        @for $i from 1 through $grid-columns {
            .col#{$infix}-#{$i} {
                width: math.div(100%, $grid-columns) * $i;
            }
        }
    }
}
